/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendor/web3-core-requestmanager"],{

/***/ "./node_modules/web3-core-requestmanager/lib/batch.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/lib/batch.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file batch.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Jsonrpc = __webpack_require__(/*! ./jsonrpc */ \"./node_modules/web3-core-requestmanager/lib/jsonrpc.js\");\nvar errors = __webpack_require__(/*! web3-core-helpers */ \"./node_modules/web3-core-helpers/lib/index.js\").errors;\nvar Batch = function (requestManager) {\n    this.requestManager = requestManager;\n    this.requests = [];\n};\n/**\n * Should be called to add create new request to batch request\n *\n * @method add\n * @param {Object} jsonrpc requet object\n */\nBatch.prototype.add = function (request) {\n    this.requests.push(request);\n};\n/**\n * Should be called to execute batch request\n *\n * @method execute\n */\nBatch.prototype.execute = function () {\n    var requests = this.requests;\n    this.requestManager.sendBatch(requests, function (err, results) {\n        results = results || [];\n        requests.map(function (request, index) {\n            return results[index] || {};\n        }).forEach(function (result, index) {\n            if (requests[index].callback) {\n                if (result && result.error) {\n                    return requests[index].callback(errors.ErrorResponse(result));\n                }\n                if (!Jsonrpc.isValidResponse(result)) {\n                    return requests[index].callback(errors.InvalidResponse(result));\n                }\n                try {\n                    requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);\n                }\n                catch (err) {\n                    requests[index].callback(err);\n                }\n            }\n        });\n    });\n};\nmodule.exports = Batch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL2xpYi9iYXRjaC5qcz84OTlkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7QUFDYixjQUFjLG1CQUFPLENBQUMseUVBQVc7QUFDakMsYUFBYSxvR0FBbUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtcmVxdWVzdG1hbmFnZXIvbGliL2JhdGNoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgYmF0Y2guanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIEpzb25ycGMgPSByZXF1aXJlKCcuL2pzb25ycGMnKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCd3ZWIzLWNvcmUtaGVscGVycycpLmVycm9ycztcbnZhciBCYXRjaCA9IGZ1bmN0aW9uIChyZXF1ZXN0TWFuYWdlcikge1xuICAgIHRoaXMucmVxdWVzdE1hbmFnZXIgPSByZXF1ZXN0TWFuYWdlcjtcbiAgICB0aGlzLnJlcXVlc3RzID0gW107XG59O1xuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGFkZCBjcmVhdGUgbmV3IHJlcXVlc3QgdG8gYmF0Y2ggcmVxdWVzdFxuICpcbiAqIEBtZXRob2QgYWRkXG4gKiBAcGFyYW0ge09iamVjdH0ganNvbnJwYyByZXF1ZXQgb2JqZWN0XG4gKi9cbkJhdGNoLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgIHRoaXMucmVxdWVzdHMucHVzaChyZXF1ZXN0KTtcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZXhlY3V0ZSBiYXRjaCByZXF1ZXN0XG4gKlxuICogQG1ldGhvZCBleGVjdXRlXG4gKi9cbkJhdGNoLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXF1ZXN0cyA9IHRoaXMucmVxdWVzdHM7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlci5zZW5kQmF0Y2gocmVxdWVzdHMsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG4gICAgICAgIHJlcXVlc3RzLm1hcChmdW5jdGlvbiAocmVxdWVzdCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzW2luZGV4XSB8fCB7fTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0c1tpbmRleF0uY2FsbGJhY2soZXJyb3JzLkVycm9yUmVzcG9uc2UocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghSnNvbnJwYy5pc1ZhbGlkUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdHNbaW5kZXhdLmNhbGxiYWNrKGVycm9ycy5JbnZhbGlkUmVzcG9uc2UocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjayhudWxsLCByZXF1ZXN0c1tpbmRleF0uZm9ybWF0ID8gcmVxdWVzdHNbaW5kZXhdLmZvcm1hdChyZXN1bHQucmVzdWx0KSA6IHJlc3VsdC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBCYXRjaDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/web3-core-requestmanager/lib/batch.js\n");

/***/ }),

/***/ "./node_modules/web3-core-requestmanager/lib/givenProvider.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/lib/givenProvider.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file givenProvider.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar givenProvider = null;\n// ADD GIVEN PROVIDER\n/* jshint ignore:start */\nvar global;\ntry {\n    global = Function('return this')();\n}\ncatch (e) {\n    global = window;\n}\n// EIP-1193: window.ethereum\nif (typeof global.ethereum !== 'undefined') {\n    givenProvider = global.ethereum;\n    // Legacy web3.currentProvider\n}\nelse if (typeof global.web3 !== 'undefined' && global.web3.currentProvider) {\n    if (global.web3.currentProvider.sendAsync) {\n        global.web3.currentProvider.send = global.web3.currentProvider.sendAsync;\n        delete global.web3.currentProvider.sendAsync;\n    }\n    // if connection is 'ipcProviderWrapper', add subscription support\n    if (!global.web3.currentProvider.on &&\n        global.web3.currentProvider.connection &&\n        global.web3.currentProvider.connection.constructor.name === 'ipcProviderWrapper') {\n        global.web3.currentProvider.on = function (type, callback) {\n            if (typeof callback !== 'function')\n                throw new Error('The second parameter callback must be a function.');\n            switch (type) {\n                case 'data':\n                    this.connection.on('data', function (data) {\n                        var result = '';\n                        data = data.toString();\n                        try {\n                            result = JSON.parse(data);\n                        }\n                        catch (e) {\n                            return callback(new Error('Couldn\\'t parse response data' + data));\n                        }\n                        // notification\n                        if (!result.id && result.method.indexOf('_subscription') !== -1) {\n                            callback(null, result);\n                        }\n                    });\n                    break;\n                default:\n                    this.connection.on(type, callback);\n                    break;\n            }\n        };\n    }\n    givenProvider = global.web3.currentProvider;\n}\n/* jshint ignore:end */\nmodule.exports = givenProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL2xpYi9naXZlblByb3ZpZGVyLmpzPzMyMjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYjMtY29yZS1yZXF1ZXN0bWFuYWdlci9saWIvZ2l2ZW5Qcm92aWRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuLyoqXG4gKiBAZmlsZSBnaXZlblByb3ZpZGVyLmpzXG4gKiBAYXV0aG9yIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhlcmV1bS5vcmc+XG4gKiBAZGF0ZSAyMDE3XG4gKi9cblwidXNlIHN0cmljdFwiO1xudmFyIGdpdmVuUHJvdmlkZXIgPSBudWxsO1xuLy8gQUREIEdJVkVOIFBST1ZJREVSXG4vKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovXG52YXIgZ2xvYmFsO1xudHJ5IHtcbiAgICBnbG9iYWwgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuY2F0Y2ggKGUpIHtcbiAgICBnbG9iYWwgPSB3aW5kb3c7XG59XG4vLyBFSVAtMTE5Mzogd2luZG93LmV0aGVyZXVtXG5pZiAodHlwZW9mIGdsb2JhbC5ldGhlcmV1bSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBnaXZlblByb3ZpZGVyID0gZ2xvYmFsLmV0aGVyZXVtO1xuICAgIC8vIExlZ2FjeSB3ZWIzLmN1cnJlbnRQcm92aWRlclxufVxuZWxzZSBpZiAodHlwZW9mIGdsb2JhbC53ZWIzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIpIHtcbiAgICBpZiAoZ2xvYmFsLndlYjMuY3VycmVudFByb3ZpZGVyLnNlbmRBc3luYykge1xuICAgICAgICBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIuc2VuZCA9IGdsb2JhbC53ZWIzLmN1cnJlbnRQcm92aWRlci5zZW5kQXN5bmM7XG4gICAgICAgIGRlbGV0ZSBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIuc2VuZEFzeW5jO1xuICAgIH1cbiAgICAvLyBpZiBjb25uZWN0aW9uIGlzICdpcGNQcm92aWRlcldyYXBwZXInLCBhZGQgc3Vic2NyaXB0aW9uIHN1cHBvcnRcbiAgICBpZiAoIWdsb2JhbC53ZWIzLmN1cnJlbnRQcm92aWRlci5vbiAmJlxuICAgICAgICBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIuY29ubmVjdGlvbiAmJlxuICAgICAgICBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIuY29ubmVjdGlvbi5jb25zdHJ1Y3Rvci5uYW1lID09PSAnaXBjUHJvdmlkZXJXcmFwcGVyJykge1xuICAgICAgICBnbG9iYWwud2ViMy5jdXJyZW50UHJvdmlkZXIub24gPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2Vjb25kIHBhcmFtZXRlciBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0NvdWxkblxcJ3QgcGFyc2UgcmVzcG9uc2UgZGF0YScgKyBkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RpZmljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0LmlkICYmIHJlc3VsdC5tZXRob2QuaW5kZXhPZignX3N1YnNjcmlwdGlvbicpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub24odHlwZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2l2ZW5Qcm92aWRlciA9IGdsb2JhbC53ZWIzLmN1cnJlbnRQcm92aWRlcjtcbn1cbi8qIGpzaGludCBpZ25vcmU6ZW5kICovXG5tb2R1bGUuZXhwb3J0cyA9IGdpdmVuUHJvdmlkZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/web3-core-requestmanager/lib/givenProvider.js\n");

/***/ }),

/***/ "./node_modules/web3-core-requestmanager/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/lib/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nconst { callbackify } = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\nvar _ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/underscore.js\");\nvar errors = __webpack_require__(/*! web3-core-helpers */ \"./node_modules/web3-core-helpers/lib/index.js\").errors;\nvar Jsonrpc = __webpack_require__(/*! ./jsonrpc.js */ \"./node_modules/web3-core-requestmanager/lib/jsonrpc.js\");\nvar BatchManager = __webpack_require__(/*! ./batch.js */ \"./node_modules/web3-core-requestmanager/lib/batch.js\");\nvar givenProvider = __webpack_require__(/*! ./givenProvider.js */ \"./node_modules/web3-core-requestmanager/lib/givenProvider.js\");\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\nvar RequestManager = function RequestManager(provider, net) {\n    this.provider = null;\n    this.providers = RequestManager.providers;\n    this.setProvider(provider, net);\n    this.subscriptions = new Map();\n};\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n    WebsocketProvider: __webpack_require__(/*! web3-providers-ws */ \"./node_modules/web3-providers-ws/lib/index.js\"),\n    HttpProvider: __webpack_require__(/*! web3-providers-http */ \"./node_modules/web3-providers-http/lib/index.js\"),\n    IpcProvider: __webpack_require__(/*! web3-providers-ipc */ \"./node_modules/web3-providers-ipc/lib/index.js\")\n};\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\nRequestManager.prototype.setProvider = function (provider, net) {\n    var _this = this;\n    // autodetect provider\n    if (provider && typeof provider === 'string' && this.providers) {\n        // HTTP\n        if (/^http(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.HttpProvider(provider);\n            // WS\n        }\n        else if (/^ws(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.WebsocketProvider(provider);\n            // IPC\n        }\n        else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n            provider = new this.providers.IpcProvider(provider, net);\n        }\n        else if (provider) {\n            throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n        }\n    }\n    // reset the old one before changing, if still connected\n    if (this.provider && this.provider.connected)\n        this.clearSubscriptions();\n    this.provider = provider || null;\n    // listen to incoming notifications\n    if (this.provider && this.provider.on) {\n        if (typeof provider.request === 'function') { // EIP-1193 provider\n            this.provider.on('message', function (payload) {\n                if (payload && payload.type === 'eth_subscription' && payload.data) {\n                    const data = payload.data;\n                    if (data.subscription && _this.subscriptions.has(data.subscription)) {\n                        _this.subscriptions.get(data.subscription).callback(null, data.result);\n                    }\n                }\n            });\n        }\n        else { // legacy provider subscription event\n            this.provider.on('data', function data(result, deprecatedResult) {\n                result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n                // if result is a subscription, call callback for that subscription\n                if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {\n                    _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n                }\n            });\n        }\n        // resubscribe if the provider has reconnected\n        this.provider.on('connect', function connect() {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.subscription.resubscribe();\n            });\n        });\n        // notify all subscriptions about the error condition\n        this.provider.on('error', function error(error) {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.callback(error);\n            });\n        });\n        // notify all subscriptions about bad close conditions\n        const disconnect = function disconnect(event) {\n            if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n                _this.subscriptions.forEach(function (subscription) {\n                    subscription.callback(errors.ConnectionCloseError(event));\n                    _this.subscriptions.delete(subscription.subscription.id);\n                });\n                if (_this.provider && _this.provider.emit) {\n                    _this.provider.emit('error', errors.ConnectionCloseError(event));\n                }\n            }\n            if (_this.provider && _this.provider.emit) {\n                _this.provider.emit('end', event);\n            }\n        };\n        // TODO: Remove close once the standard allows it\n        this.provider.on('close', disconnect);\n        this.provider.on('disconnect', disconnect);\n        // TODO add end, timeout??\n    }\n};\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n    callback = callback || function () { };\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n    const { method, params } = data;\n    const jsonrpcPayload = Jsonrpc.toPayload(method, params);\n    const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);\n    if (this.provider.request) {\n        const callbackRequest = callbackify(this.provider.request.bind(this.provider));\n        const requestArgs = { method, params };\n        callbackRequest(requestArgs, callback);\n    }\n    else if (this.provider.sendAsync) {\n        this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);\n    }\n    else if (this.provider.send) {\n        this.provider.send(jsonrpcPayload, jsonrpcResultCallback);\n    }\n    else {\n        throw new Error('Provider does not have a request or send method to use.');\n    }\n};\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n    var payload = Jsonrpc.toBatchPayload(data);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n        if (!_.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n        callback(null, results);\n    });\n};\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n    if (this.provider.on) {\n        this.subscriptions.set(subscription.id, {\n            callback: callback,\n            subscription: subscription\n        });\n    }\n    else {\n        throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n    }\n};\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n    if (this.subscriptions.has(id)) {\n        var type = this.subscriptions.get(id).subscription.options.type;\n        // remove subscription first to avoid reentry\n        this.subscriptions.delete(id);\n        // then, try to actually unsubscribe\n        this.send({\n            method: type + '_unsubscribe',\n            params: [id]\n        }, callback);\n        return;\n    }\n    if (typeof callback === 'function') {\n        // call the callback if the subscription was already removed\n        callback(null);\n    }\n};\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n *\n * @returns {boolean}\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n    try {\n        var _this = this;\n        // uninstall all subscriptions\n        if (this.subscriptions.size > 0) {\n            this.subscriptions.forEach(function (value, id) {\n                if (!keepIsSyncing || value.name !== 'syncing')\n                    _this.removeSubscription(id);\n            });\n        }\n        //  reset notification callbacks etc.\n        if (this.provider.reset)\n            this.provider.reset();\n        return true;\n    }\n    catch (e) {\n        throw new Error(`Error while clearing subscriptions: ${e}`);\n    }\n};\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n    return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isIpcCloseError = function (event) {\n    return typeof event === 'boolean' && event;\n};\n/**\n * The jsonrpc result callback for RequestManager.send\n *\n * @method _jsonrpcResultCallback\n *\n * @param {Function} callback the callback to use\n * @param {Object} payload the jsonrpc payload\n *\n * @returns {Function} return callback of form (err, result)\n *\n */\nRequestManager.prototype._jsonrpcResultCallback = function (callback, payload) {\n    return function (err, result) {\n        if (result && result.id && payload.id !== result.id) {\n            return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (result && result.error) {\n            return callback(errors.ErrorResponse(result));\n        }\n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n        callback(null, result.result);\n    };\n};\nmodule.exports = {\n    Manager: RequestManager,\n    BatchManager: BatchManager\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL2xpYi9pbmRleC5qcz8xNjZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7QUFDYixPQUFPLGNBQWMsR0FBRyxtQkFBTyxDQUFDLHlDQUFNO0FBQ3RDLFFBQVEsbUJBQU8sQ0FBQywyREFBWTtBQUM1QixhQUFhLG9HQUFtQztBQUNoRCxjQUFjLG1CQUFPLENBQUMsNEVBQWM7QUFDcEMsbUJBQW1CLG1CQUFPLENBQUMsd0VBQVk7QUFDdkMsb0JBQW9CLG1CQUFPLENBQUMsd0ZBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLFdBQVc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBTyxDQUFDLHdFQUFtQjtBQUNsRCxrQkFBa0IsbUJBQU8sQ0FBQyw0RUFBcUI7QUFDL0MsaUJBQWlCLG1CQUFPLENBQUMsMEVBQW9CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFdBQVc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGNBQWM7QUFDZDtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELEVBQUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFCQUFxQjtBQUNoQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsVUFBVSxjQUFjLFdBQVcsT0FBTyx3QkFBd0I7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtcmVxdWVzdG1hbmFnZXIvbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgaW5kZXguanNcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGVyZXVtLm9yZz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB7IGNhbGxiYWNraWZ5IH0gPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbnZhciBlcnJvcnMgPSByZXF1aXJlKCd3ZWIzLWNvcmUtaGVscGVycycpLmVycm9ycztcbnZhciBKc29ucnBjID0gcmVxdWlyZSgnLi9qc29ucnBjLmpzJyk7XG52YXIgQmF0Y2hNYW5hZ2VyID0gcmVxdWlyZSgnLi9iYXRjaC5qcycpO1xudmFyIGdpdmVuUHJvdmlkZXIgPSByZXF1aXJlKCcuL2dpdmVuUHJvdmlkZXIuanMnKTtcbi8qKlxuICogSXQncyByZXNwb25zaWJsZSBmb3IgcGFzc2luZyBtZXNzYWdlcyB0byBwcm92aWRlcnNcbiAqIEl0J3MgYWxzbyByZXNwb25zaWJsZSBmb3IgcG9sbGluZyB0aGUgZXRoZXJldW0gbm9kZSBmb3IgaW5jb21pbmcgbWVzc2FnZXNcbiAqIERlZmF1bHQgcG9sbCB0aW1lb3V0IGlzIDEgc2Vjb25kXG4gKiBTaW5nbGV0b25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9cHJvdmlkZXJcbiAqIEBwYXJhbSB7TmV0LlNvY2tldH0gbmV0XG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBSZXF1ZXN0TWFuYWdlciA9IGZ1bmN0aW9uIFJlcXVlc3RNYW5hZ2VyKHByb3ZpZGVyLCBuZXQpIHtcbiAgICB0aGlzLnByb3ZpZGVyID0gbnVsbDtcbiAgICB0aGlzLnByb3ZpZGVycyA9IFJlcXVlc3RNYW5hZ2VyLnByb3ZpZGVycztcbiAgICB0aGlzLnNldFByb3ZpZGVyKHByb3ZpZGVyLCBuZXQpO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG5ldyBNYXAoKTtcbn07XG5SZXF1ZXN0TWFuYWdlci5naXZlblByb3ZpZGVyID0gZ2l2ZW5Qcm92aWRlcjtcblJlcXVlc3RNYW5hZ2VyLnByb3ZpZGVycyA9IHtcbiAgICBXZWJzb2NrZXRQcm92aWRlcjogcmVxdWlyZSgnd2ViMy1wcm92aWRlcnMtd3MnKSxcbiAgICBIdHRwUHJvdmlkZXI6IHJlcXVpcmUoJ3dlYjMtcHJvdmlkZXJzLWh0dHAnKSxcbiAgICBJcGNQcm92aWRlcjogcmVxdWlyZSgnd2ViMy1wcm92aWRlcnMtaXBjJylcbn07XG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIHNldCBwcm92aWRlciBvZiByZXF1ZXN0IG1hbmFnZXJcbiAqXG4gKiBAbWV0aG9kIHNldFByb3ZpZGVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHByb3ZpZGVyXG4gKiBAcGFyYW0ge25ldC5Tb2NrZXR9IG5ldFxuICpcbiAqIEByZXR1cm5zIHZvaWRcbiAqL1xuUmVxdWVzdE1hbmFnZXIucHJvdG90eXBlLnNldFByb3ZpZGVyID0gZnVuY3Rpb24gKHByb3ZpZGVyLCBuZXQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vIGF1dG9kZXRlY3QgcHJvdmlkZXJcbiAgICBpZiAocHJvdmlkZXIgJiYgdHlwZW9mIHByb3ZpZGVyID09PSAnc3RyaW5nJyAmJiB0aGlzLnByb3ZpZGVycykge1xuICAgICAgICAvLyBIVFRQXG4gICAgICAgIGlmICgvXmh0dHAocyk/OlxcL1xcLy9pLnRlc3QocHJvdmlkZXIpKSB7XG4gICAgICAgICAgICBwcm92aWRlciA9IG5ldyB0aGlzLnByb3ZpZGVycy5IdHRwUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgICAgICAgICAgLy8gV1NcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgvXndzKHMpPzpcXC9cXC8vaS50ZXN0KHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgcHJvdmlkZXIgPSBuZXcgdGhpcy5wcm92aWRlcnMuV2Vic29ja2V0UHJvdmlkZXIocHJvdmlkZXIpO1xuICAgICAgICAgICAgLy8gSVBDXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvdmlkZXIgJiYgdHlwZW9mIG5ldCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG5ldC5jb25uZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwcm92aWRlciA9IG5ldyB0aGlzLnByb3ZpZGVycy5JcGNQcm92aWRlcihwcm92aWRlciwgbmV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm92aWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IGF1dG9kZXRlY3QgcHJvdmlkZXIgZm9yIFwiJyArIHByb3ZpZGVyICsgJ1wiJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmVzZXQgdGhlIG9sZCBvbmUgYmVmb3JlIGNoYW5naW5nLCBpZiBzdGlsbCBjb25uZWN0ZWRcbiAgICBpZiAodGhpcy5wcm92aWRlciAmJiB0aGlzLnByb3ZpZGVyLmNvbm5lY3RlZClcbiAgICAgICAgdGhpcy5jbGVhclN1YnNjcmlwdGlvbnMoKTtcbiAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXIgfHwgbnVsbDtcbiAgICAvLyBsaXN0ZW4gdG8gaW5jb21pbmcgbm90aWZpY2F0aW9uc1xuICAgIGlmICh0aGlzLnByb3ZpZGVyICYmIHRoaXMucHJvdmlkZXIub24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm92aWRlci5yZXF1ZXN0ID09PSAnZnVuY3Rpb24nKSB7IC8vIEVJUC0xMTkzIHByb3ZpZGVyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyLm9uKCdtZXNzYWdlJywgZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocGF5bG9hZCAmJiBwYXlsb2FkLnR5cGUgPT09ICdldGhfc3Vic2NyaXB0aW9uJyAmJiBwYXlsb2FkLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHBheWxvYWQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3Vic2NyaXB0aW9uICYmIF90aGlzLnN1YnNjcmlwdGlvbnMuaGFzKGRhdGEuc3Vic2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9ucy5nZXQoZGF0YS5zdWJzY3JpcHRpb24pLmNhbGxiYWNrKG51bGwsIGRhdGEucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBsZWdhY3kgcHJvdmlkZXIgc3Vic2NyaXB0aW9uIGV2ZW50XG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyLm9uKCdkYXRhJywgZnVuY3Rpb24gZGF0YShyZXN1bHQsIGRlcHJlY2F0ZWRSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgZGVwcmVjYXRlZFJlc3VsdDsgLy8gdGhpcyBpcyBmb3IgcG9zc2libGUgb2xkIHByb3ZpZGVycywgd2hpY2ggbWF5IGhhZCB0aGUgZXJyb3IgZmlyc3QgaGFuZGxlclxuICAgICAgICAgICAgICAgIC8vIGlmIHJlc3VsdCBpcyBhIHN1YnNjcmlwdGlvbiwgY2FsbCBjYWxsYmFjayBmb3IgdGhhdCBzdWJzY3JpcHRpb25cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lm1ldGhvZCAmJiByZXN1bHQucGFyYW1zICYmIHJlc3VsdC5wYXJhbXMuc3Vic2NyaXB0aW9uICYmIF90aGlzLnN1YnNjcmlwdGlvbnMuaGFzKHJlc3VsdC5wYXJhbXMuc3Vic2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdWJzY3JpcHRpb25zLmdldChyZXN1bHQucGFyYW1zLnN1YnNjcmlwdGlvbikuY2FsbGJhY2sobnVsbCwgcmVzdWx0LnBhcmFtcy5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlc3Vic2NyaWJlIGlmIHRoZSBwcm92aWRlciBoYXMgcmVjb25uZWN0ZWRcbiAgICAgICAgdGhpcy5wcm92aWRlci5vbignY29ubmVjdCcsIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb24ucmVzdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gbm90aWZ5IGFsbCBzdWJzY3JpcHRpb25zIGFib3V0IHRoZSBlcnJvciBjb25kaXRpb25cbiAgICAgICAgdGhpcy5wcm92aWRlci5vbignZXJyb3InLCBmdW5jdGlvbiBlcnJvcihlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBub3RpZnkgYWxsIHN1YnNjcmlwdGlvbnMgYWJvdXQgYmFkIGNsb3NlIGNvbmRpdGlvbnNcbiAgICAgICAgY29uc3QgZGlzY29ubmVjdCA9IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuX2lzQ2xlYW5DbG9zZUV2ZW50KGV2ZW50KSB8fCBfdGhpcy5faXNJcGNDbG9zZUVycm9yKGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5jYWxsYmFjayhlcnJvcnMuQ29ubmVjdGlvbkNsb3NlRXJyb3IoZXZlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9ucy5kZWxldGUoc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByb3ZpZGVyICYmIF90aGlzLnByb3ZpZGVyLmVtaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJvdmlkZXIuZW1pdCgnZXJyb3InLCBlcnJvcnMuQ29ubmVjdGlvbkNsb3NlRXJyb3IoZXZlbnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMucHJvdmlkZXIgJiYgX3RoaXMucHJvdmlkZXIuZW1pdCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3ZpZGVyLmVtaXQoJ2VuZCcsIGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIGNsb3NlIG9uY2UgdGhlIHN0YW5kYXJkIGFsbG93cyBpdFxuICAgICAgICB0aGlzLnByb3ZpZGVyLm9uKCdjbG9zZScsIGRpc2Nvbm5lY3QpO1xuICAgICAgICB0aGlzLnByb3ZpZGVyLm9uKCdkaXNjb25uZWN0JywgZGlzY29ubmVjdCk7XG4gICAgICAgIC8vIFRPRE8gYWRkIGVuZCwgdGltZW91dD8/XG4gICAgfVxufTtcbi8qKlxuICogQXN5bmNocm9ub3VzbHkgc2VuZCByZXF1ZXN0IHRvIHByb3ZpZGVyLlxuICogUHJlZmVycyB0byB1c2UgdGhlIGByZXF1ZXN0YCBtZXRob2QgYXZhaWxhYmxlIG9uIHRoZSBwcm92aWRlciBhcyBzcGVjaWZpZWQgaW4gW0VJUC0xMTkzXShodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTExOTMpLlxuICogSWYgYHJlcXVlc3RgIGlzIG5vdCBhdmFpbGFibGUsIGZhbGxzIGJhY2sgdG8gYHNlbmRBc3luY2AgYW5kIGBzZW5kYCByZXNwZWN0aXZlbHkuXG4gKiBAbWV0aG9kIHNlbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkgeyB9O1xuICAgIGlmICghdGhpcy5wcm92aWRlcikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3JzLkludmFsaWRQcm92aWRlcigpKTtcbiAgICB9XG4gICAgY29uc3QgeyBtZXRob2QsIHBhcmFtcyB9ID0gZGF0YTtcbiAgICBjb25zdCBqc29ucnBjUGF5bG9hZCA9IEpzb25ycGMudG9QYXlsb2FkKG1ldGhvZCwgcGFyYW1zKTtcbiAgICBjb25zdCBqc29ucnBjUmVzdWx0Q2FsbGJhY2sgPSB0aGlzLl9qc29ucnBjUmVzdWx0Q2FsbGJhY2soY2FsbGJhY2ssIGpzb25ycGNQYXlsb2FkKTtcbiAgICBpZiAodGhpcy5wcm92aWRlci5yZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrUmVxdWVzdCA9IGNhbGxiYWNraWZ5KHRoaXMucHJvdmlkZXIucmVxdWVzdC5iaW5kKHRoaXMucHJvdmlkZXIpKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdEFyZ3MgPSB7IG1ldGhvZCwgcGFyYW1zIH07XG4gICAgICAgIGNhbGxiYWNrUmVxdWVzdChyZXF1ZXN0QXJncywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLnByb3ZpZGVyLnNlbmRBc3luYykge1xuICAgICAgICB0aGlzLnByb3ZpZGVyLnNlbmRBc3luYyhqc29ucnBjUGF5bG9hZCwganNvbnJwY1Jlc3VsdENhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5wcm92aWRlci5zZW5kKSB7XG4gICAgICAgIHRoaXMucHJvdmlkZXIuc2VuZChqc29ucnBjUGF5bG9hZCwganNvbnJwY1Jlc3VsdENhbGxiYWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZXIgZG9lcyBub3QgaGF2ZSBhIHJlcXVlc3Qgb3Igc2VuZCBtZXRob2QgdG8gdXNlLicpO1xuICAgIH1cbn07XG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNlbmQgYmF0Y2ggcmVxdWVzdC5cbiAqIE9ubHkgd29ya3MgaWYgcHJvdmlkZXIgc3VwcG9ydHMgYmF0Y2ggbWV0aG9kcyB0aHJvdWdoIGBzZW5kQXN5bmNgIG9yIGBzZW5kYC5cbiAqIEBtZXRob2Qgc2VuZEJhdGNoXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIC0gYXJyYXkgb2YgcGF5bG9hZCBvYmplY3RzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuc2VuZEJhdGNoID0gZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLnByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcnMuSW52YWxpZFByb3ZpZGVyKCkpO1xuICAgIH1cbiAgICB2YXIgcGF5bG9hZCA9IEpzb25ycGMudG9CYXRjaFBheWxvYWQoZGF0YSk7XG4gICAgdGhpcy5wcm92aWRlclt0aGlzLnByb3ZpZGVyLnNlbmRBc3luYyA/ICdzZW5kQXN5bmMnIDogJ3NlbmQnXShwYXlsb2FkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghXy5pc0FycmF5KHJlc3VsdHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3JzLkludmFsaWRSZXNwb25zZShyZXN1bHRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgfSk7XG59O1xuLyoqXG4gKiBXYWl0cyBmb3Igbm90aWZpY2F0aW9uc1xuICpcbiAqIEBtZXRob2QgYWRkU3Vic2NyaXB0aW9uXG4gKiBAcGFyYW0ge1N1YnNjcmlwdGlvbn0gc3Vic2NyaXB0aW9uICAgICAgICAgdGhlIHN1YnNjcmlwdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgICAgICAgICB0aGUgc3Vic2NyaXB0aW9uIG5hbWVzcGFjZSAoZXRoLCBwZXJzb25hbCwgZXRjKVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgICB0aGUgY2FsbGJhY2sgdG8gY2FsbCBmb3IgaW5jb21pbmcgbm90aWZpY2F0aW9uc1xuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuYWRkU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbiwgY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy5wcm92aWRlci5vbikge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuc2V0KHN1YnNjcmlwdGlvbi5pZCwge1xuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlciBkb2VzblxcJ3Qgc3VwcG9ydCBzdWJzY3JpcHRpb25zOiAnICsgdGhpcy5wcm92aWRlci5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICB9XG59O1xuLyoqXG4gKiBXYWl0cyBmb3Igbm90aWZpY2F0aW9uc1xuICpcbiAqIEBtZXRob2QgcmVtb3ZlU3Vic2NyaXB0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgICAgICAgICAgIHRoZSBzdWJzY3JpcHRpb24gaWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrICAgZmlyZWQgb25jZSB0aGUgc3Vic2NyaXB0aW9uIGlzIHJlbW92ZWRcbiAqL1xuUmVxdWVzdE1hbmFnZXIucHJvdG90eXBlLnJlbW92ZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChpZCwgY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25zLmhhcyhpZCkpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0aGlzLnN1YnNjcmlwdGlvbnMuZ2V0KGlkKS5zdWJzY3JpcHRpb24ub3B0aW9ucy50eXBlO1xuICAgICAgICAvLyByZW1vdmUgc3Vic2NyaXB0aW9uIGZpcnN0IHRvIGF2b2lkIHJlZW50cnlcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmRlbGV0ZShpZCk7XG4gICAgICAgIC8vIHRoZW4sIHRyeSB0byBhY3R1YWxseSB1bnN1YnNjcmliZVxuICAgICAgICB0aGlzLnNlbmQoe1xuICAgICAgICAgICAgbWV0aG9kOiB0eXBlICsgJ191bnN1YnNjcmliZScsXG4gICAgICAgICAgICBwYXJhbXM6IFtpZF1cbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gY2FsbCB0aGUgY2FsbGJhY2sgaWYgdGhlIHN1YnNjcmlwdGlvbiB3YXMgYWxyZWFkeSByZW1vdmVkXG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgIH1cbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gcmVzZXQgdGhlIHN1YnNjcmlwdGlvbnNcbiAqXG4gKiBAbWV0aG9kIHJlc2V0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblJlcXVlc3RNYW5hZ2VyLnByb3RvdHlwZS5jbGVhclN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiAoa2VlcElzU3luY2luZykge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIHVuaW5zdGFsbCBhbGwgc3Vic2NyaXB0aW9uc1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25zLnNpemUgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZWVwSXNTeW5jaW5nIHx8IHZhbHVlLm5hbWUgIT09ICdzeW5jaW5nJylcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlU3Vic2NyaXB0aW9uKGlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vICByZXNldCBub3RpZmljYXRpb24gY2FsbGJhY2tzIGV0Yy5cbiAgICAgICAgaWYgKHRoaXMucHJvdmlkZXIucmVzZXQpXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVyLnJlc2V0KCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHdoaWxlIGNsZWFyaW5nIHN1YnNjcmlwdGlvbnM6ICR7ZX1gKTtcbiAgICB9XG59O1xuLyoqXG4gKiBFdmFsdWF0ZXMgV1MgY2xvc2UgZXZlbnRcbiAqXG4gKiBAbWV0aG9kIF9pc0NsZWFuQ2xvc2VcbiAqXG4gKiBAcGFyYW0ge0Nsb3NlRXZlbnQgfCBib29sZWFufSBldmVudCBXUyBjbG9zZSBldmVudCBvciBleGNlcHRpb24gZmxhZ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuX2lzQ2xlYW5DbG9zZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBldmVudCA9PT0gJ29iamVjdCcgJiYgKFsxMDAwXS5pbmNsdWRlcyhldmVudC5jb2RlKSB8fCBldmVudC53YXNDbGVhbiA9PT0gdHJ1ZSk7XG59O1xuLyoqXG4gKiBEZXRlY3RzIElwYyBjbG9zZSBlcnJvci4gVGhlIG5vZGUubmV0IG1vZHVsZSBlbWl0cyAoJ2Nsb3NlJywgaXNFeGNlcHRpb24pXG4gKlxuICogQG1ldGhvZCBfaXNJcGNDbG9zZUVycm9yXG4gKlxuICogQHBhcmFtIHtDbG9zZUV2ZW50IHwgYm9vbGVhbn0gZXZlbnQgV1MgY2xvc2UgZXZlbnQgb3IgZXhjZXB0aW9uIGZsYWdcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuUmVxdWVzdE1hbmFnZXIucHJvdG90eXBlLl9pc0lwY0Nsb3NlRXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGV2ZW50ID09PSAnYm9vbGVhbicgJiYgZXZlbnQ7XG59O1xuLyoqXG4gKiBUaGUganNvbnJwYyByZXN1bHQgY2FsbGJhY2sgZm9yIFJlcXVlc3RNYW5hZ2VyLnNlbmRcbiAqXG4gKiBAbWV0aG9kIF9qc29ucnBjUmVzdWx0Q2FsbGJhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgdG8gdXNlXG4gKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZCB0aGUganNvbnJwYyBwYXlsb2FkXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSByZXR1cm4gY2FsbGJhY2sgb2YgZm9ybSAoZXJyLCByZXN1bHQpXG4gKlxuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuX2pzb25ycGNSZXN1bHRDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaywgcGF5bG9hZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuaWQgJiYgcGF5bG9hZC5pZCAhPT0gcmVzdWx0LmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKGBXcm9uZyByZXNwb25zZSBpZCAke3Jlc3VsdC5pZH0gKGV4cGVjdGVkOiAke3BheWxvYWQuaWR9KSBpbiAke0pTT04uc3RyaW5naWZ5KHBheWxvYWQpfWApKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5lcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9ycy5FcnJvclJlc3BvbnNlKHJlc3VsdCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghSnNvbnJwYy5pc1ZhbGlkUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9ycy5JbnZhbGlkUmVzcG9uc2UocmVzdWx0KSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0LnJlc3VsdCk7XG4gICAgfTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBNYW5hZ2VyOiBSZXF1ZXN0TWFuYWdlcixcbiAgICBCYXRjaE1hbmFnZXI6IEJhdGNoTWFuYWdlclxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/web3-core-requestmanager/lib/index.js\n");

/***/ }),

/***/ "./node_modules/web3-core-requestmanager/lib/jsonrpc.js":
/*!**************************************************************!*\
  !*** ./node_modules/web3-core-requestmanager/lib/jsonrpc.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n\n// Initialize Jsonrpc as a simple object with utility functions.\nvar Jsonrpc = {\n    messageId: 0\n};\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\nJsonrpc.toPayload = function (method, params) {\n    if (!method) {\n        throw new Error('JSONRPC method should be specified for params: \"' + JSON.stringify(params) + '\"!');\n    }\n    // advance message ID\n    Jsonrpc.messageId++;\n    return {\n        jsonrpc: '2.0',\n        id: Jsonrpc.messageId,\n        method: method,\n        params: params || []\n    };\n};\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\nJsonrpc.isValidResponse = function (response) {\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n    function validateSingleMessage(message) {\n        return !!message &&\n            !message.error &&\n            message.jsonrpc === '2.0' &&\n            (typeof message.id === 'number' || typeof message.id === 'string') &&\n            message.result !== undefined; // only undefined is not valid json object\n    }\n};\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\nJsonrpc.toBatchPayload = function (messages) {\n    return messages.map(function (message) {\n        return Jsonrpc.toPayload(message.method, message.params);\n    });\n};\nmodule.exports = Jsonrpc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2ViMy1jb3JlLXJlcXVlc3RtYW5hZ2VyL2xpYi9qc29ucnBjLmpzPzhmNzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsTUFBTTtBQUNqQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWIzLWNvcmUtcmVxdWVzdG1hbmFnZXIvbGliL2pzb25ycGMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIEBmaWxlIGpzb25ycGMuanNcbiAqIEBhdXRob3JzOlxuICogICBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogICBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqICAgQWFyb24gS3VtYXZpcyA8YWFyb25Aa3VtYXZpcy5tZT5cbiAqIEBkYXRlIDIwMTVcbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBJbml0aWFsaXplIEpzb25ycGMgYXMgYSBzaW1wbGUgb2JqZWN0IHdpdGggdXRpbGl0eSBmdW5jdGlvbnMuXG52YXIgSnNvbnJwYyA9IHtcbiAgICBtZXNzYWdlSWQ6IDBcbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gdmFsaWQganNvbiBjcmVhdGUgcGF5bG9hZCBvYmplY3RcbiAqXG4gKiBAbWV0aG9kIHRvUGF5bG9hZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIG9mIGpzb25ycGMgY2FsbCwgcmVxdWlyZWRcbiAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtcywgYW4gYXJyYXkgb2YgbWV0aG9kIHBhcmFtcywgb3B0aW9uYWxcbiAqIEByZXR1cm5zIHtPYmplY3R9IHZhbGlkIGpzb25ycGMgcGF5bG9hZCBvYmplY3RcbiAqL1xuSnNvbnJwYy50b1BheWxvYWQgPSBmdW5jdGlvbiAobWV0aG9kLCBwYXJhbXMpIHtcbiAgICBpZiAoIW1ldGhvZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pTT05SUEMgbWV0aG9kIHNob3VsZCBiZSBzcGVjaWZpZWQgZm9yIHBhcmFtczogXCInICsgSlNPTi5zdHJpbmdpZnkocGFyYW1zKSArICdcIiEnKTtcbiAgICB9XG4gICAgLy8gYWR2YW5jZSBtZXNzYWdlIElEXG4gICAgSnNvbnJwYy5tZXNzYWdlSWQrKztcbiAgICByZXR1cm4ge1xuICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgaWQ6IEpzb25ycGMubWVzc2FnZUlkLFxuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgcGFyYW1zOiBwYXJhbXMgfHwgW11cbiAgICB9O1xufTtcbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBjaGVjayBpZiBqc29ucnBjIHJlc3BvbnNlIGlzIHZhbGlkXG4gKlxuICogQG1ldGhvZCBpc1ZhbGlkUmVzcG9uc2VcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgcmVzcG9uc2UgaXMgdmFsaWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5Kc29ucnBjLmlzVmFsaWRSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJlc3BvbnNlKSA/IHJlc3BvbnNlLmV2ZXJ5KHZhbGlkYXRlU2luZ2xlTWVzc2FnZSkgOiB2YWxpZGF0ZVNpbmdsZU1lc3NhZ2UocmVzcG9uc2UpO1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlU2luZ2xlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiAhIW1lc3NhZ2UgJiZcbiAgICAgICAgICAgICFtZXNzYWdlLmVycm9yICYmXG4gICAgICAgICAgICBtZXNzYWdlLmpzb25ycGMgPT09ICcyLjAnICYmXG4gICAgICAgICAgICAodHlwZW9mIG1lc3NhZ2UuaWQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBtZXNzYWdlLmlkID09PSAnc3RyaW5nJykgJiZcbiAgICAgICAgICAgIG1lc3NhZ2UucmVzdWx0ICE9PSB1bmRlZmluZWQ7IC8vIG9ubHkgdW5kZWZpbmVkIGlzIG5vdCB2YWxpZCBqc29uIG9iamVjdFxuICAgIH1cbn07XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gY3JlYXRlIGJhdGNoIHBheWxvYWQgb2JqZWN0XG4gKlxuICogQG1ldGhvZCB0b0JhdGNoUGF5bG9hZFxuICogQHBhcmFtIHtBcnJheX0gbWVzc2FnZXMsIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCBtZXRob2QgKHJlcXVpcmVkKSBhbmQgcGFyYW1zIChvcHRpb25hbCkgZmllbGRzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGJhdGNoIHBheWxvYWRcbiAqL1xuSnNvbnJwYy50b0JhdGNoUGF5bG9hZCA9IGZ1bmN0aW9uIChtZXNzYWdlcykge1xuICAgIHJldHVybiBtZXNzYWdlcy5tYXAoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIEpzb25ycGMudG9QYXlsb2FkKG1lc3NhZ2UubWV0aG9kLCBtZXNzYWdlLnBhcmFtcyk7XG4gICAgfSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBKc29ucnBjO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/web3-core-requestmanager/lib/jsonrpc.js\n");

/***/ })

}]);